[project]
name = "operational-services"
dynamic = ["version"] # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "operational-services"
version = "0.0.0"
description = "Copernicus Sentinel operational-services."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.md"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/operational-services"
#documentation = "https://home.rs-python.eu/rs-documentation/operational-services/docs/doc/"
keywords = ["copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Image Processing"
]

packages = [
    { include = "osam", from = "object_storage_access_manager"},
]

# This root project is not used in release production.
# It's only used by the CI/CD to run pytest, pylint, mypy etc... on the whole github project.

# All the dependencies for release are set in the sub-projects
[tool.poetry.dependencies]
python = "^3.11"
osam = {path = "object_storage_access_manager", develop = true}
pytest = "^8.3.5"
pytest-cov = "^6.1.1"

[tool.poetry.group.dev]
optional = true

# All the dev dependencies are set here so they can be used by the CI.
[tool.poetry.group.dev.dependencies]
python = "^3.11"
black = "^25.1.0"
mypy = "^1.15.0"
pre-commit = "^4.2.0"
types-requests = "^2.32.0.20250328"
flake8 = "^7.1.2"
bandit = "^1.8.3"
safety = "^3.3.0"
pylint = "^3.3.7"
flake8-pyproject = "^1.2.3"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = true
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
# https://github.com/CS-SI/eodag/issues/1623
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:eodag.plugins.manager",
]

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.flake8]
max-line-length = 120
# per-file-ignores = [
#     '__init__.py:F401',
# ]

[tool.pylint]
max-line-length = 120
disable = [
    "logging-fstring-interpolation",  # Logging f-string interpolation
    "R0917",  # Too many positional arguments
    "E0401", # import-error
    "R0902", # too-many-instance-attributes
    "R0913"  # too-many-arguments
]
ignore-paths = '^docs/.*$'

# Only add notes as comments that are not checked for errors.
notes = ["XXX"]  # No errors on TODO and FIXME

min-similarity-lines = 10  # Minimum lines number of a similarity

[tool.bandit.assert_used]
skips = ['*/test_*.py', '*/conftest.py']
